// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.225
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code

namespace MediaCommMVC.Tests.AcceptanceTests.Features
{
    #region Using Directives

    using System.Globalization;

    using TechTalk.SpecFlow;

    #endregion

    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Login")]
    public partial class LoginFeature
    {
        private static ITestRunner testRunner;

#line 1 "Login.feature"
#line hidden

        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            FeatureInfo featureInfo =
                new FeatureInfo(
                    new CultureInfo("en-US"), 
                    "Login", 
                    "In order to browse protected sites\nAs member of the site\nI want to be able to log" +
                    " into the page", 
                    GenerationTargetLanguage.CSharp, 
                    (string[])(null));
            testRunner.OnFeatureStart(featureInfo);
        }

        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        public virtual void ScenarioSetup(ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Login")]
        public virtual void Login()
        {
            ScenarioInfo scenarioInfo = new ScenarioInfo(
                "Login", (string[])(null));
#line 6
            this.ScenarioSetup(scenarioInfo);
#line 7
            testRunner.Given("I navigate to \"/Account/Logon\"");
#line 8
            testRunner.And("I have entered \"testuser\" as username and \"secret\" as password");
#line 9
            testRunner.When("I press \"loginButton\"");
#line 10
            testRunner.Then("I am redirected to \"/\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NoUserNameEntered")]
        public virtual void NoUserNameEntered()
        {
            ScenarioInfo scenarioInfo = new ScenarioInfo(
                "NoUserNameEntered", (string[])(null));
#line 12
            this.ScenarioSetup(scenarioInfo);
#line 13
            testRunner.Given("I navigate to \"/Account/Logon\"");
#line 14
            testRunner.And("I have entered \"\" as username and \"secret\" as password");
#line 15
            testRunner.When("I press \"loginButton\"");
#line 16
            testRunner.Then("I see an error message telling me \"The Username field is required\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NoPasswordEntered")]
        public virtual void NoPasswordEntered()
        {
            ScenarioInfo scenarioInfo = new ScenarioInfo(
                "NoPasswordEntered", (string[])(null));
#line 18
            this.ScenarioSetup(scenarioInfo);
#line 19
            testRunner.Given("I navigate to \"/Account/Logon\"");
#line 20
            testRunner.And("I have entered \"testuser\" as username and \"\" as password");
#line 21
            testRunner.When("I press \"loginButton\"");
#line 22
            testRunner.Then("I see an error message telling me \"The Password field is required\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ShortUserNameEntered")]
        public virtual void ShortUserNameEntered()
        {
            ScenarioInfo scenarioInfo = new ScenarioInfo(
                "ShortUserNameEntered", (string[])(null));
#line 24
            this.ScenarioSetup(scenarioInfo);
#line 25
            testRunner.Given("I navigate to \"/Account/Logon\"");
#line 26
            testRunner.And("I have entered \"ab\" as username and \"secret\" as password");
#line 27
            testRunner.When("I press \"loginButton\"");
#line 28
            testRunner.Then(
                "I see an error message telling me \"The field Username must be a string with a min" +
                "imum length of 3 and a maximum length of 20\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ShortPasswordEntered")]
        public virtual void ShortPasswordEntered()
        {
            ScenarioInfo scenarioInfo = new ScenarioInfo(
                "ShortPasswordEntered", (string[])(null));
#line 30
            this.ScenarioSetup(scenarioInfo);
#line 31
            testRunner.Given("I navigate to \"/Account/Logon\"");
#line 32
            testRunner.And("I have entered \"myusername\" as username and \"1234\" as password");
#line 33
            testRunner.When("I press \"loginButton\"");
#line 34
            testRunner.Then(
                "I see an error message telling me \"The field Password must be a string with a min" +
                "imum length of 5 and a maximum length of 20\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("LongUserNameEntered")]
        public virtual void LongUserNameEntered()
        {
            ScenarioInfo scenarioInfo = new ScenarioInfo(
                "LongUserNameEntered", (string[])(null));
#line 36
            this.ScenarioSetup(scenarioInfo);
#line 37
            testRunner.Given("I navigate to \"/Account/Logon\"");
#line 38
            testRunner.And("I have entered \"ThisIsAveryLongUser..\" as username and \"secret\" as password");
#line 39
            testRunner.When("I press \"loginButton\"");
#line 40
            testRunner.Then(
                "I see an error message telling me \"The field Username must be a string with a min" +
                "imum length of 3 and a maximum length of 20\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("LongPasswordEntered")]
        public virtual void LongPasswordEntered()
        {
            ScenarioInfo scenarioInfo = new ScenarioInfo(
                "LongPasswordEntered", (string[])(null));
#line 42
            this.ScenarioSetup(scenarioInfo);
#line 43
            testRunner.Given("I navigate to \"/Account/Logon\"");
#line 44
            testRunner.And("I have entered \"myusername\" as username and \"ThisIsAreallyLongPass\" as password");
#line 45
            testRunner.When("I press \"loginButton\"");
#line 46
            testRunner.Then(
                "I see an error message telling me \"The field Password must be a string with a min" +
                "imum length of 5 and a maximum length of 20\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}

#endregion